// <auto-generated />
using ChargingStations.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChargingStations.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211109162257_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChargingStations.Domain.ChargerAggregate.Charger", b =>
                {
                    b.Property<int>("ChargerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChargerModelId")
                        .HasColumnType("int")
                        .HasColumnName("charger_model_id");

                    b.Property<double>("ChargingFeePerKwh")
                        .HasColumnType("float")
                        .HasColumnName("charging_fee_per_kwh");

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("int")
                        .HasColumnName("charging_station_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("ChargerId");

                    b.HasIndex("ChargerModelId");

                    b.HasIndex("ChargingStationId");

                    b.ToTable("charger");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargerModelAggregate.ChargerModel", b =>
                {
                    b.Property<int>("ChargerModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("ChargerModelId");

                    b.ToTable("charger_model");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargingStationAggregate.ChargingStation", b =>
                {
                    b.Property<int>("ChargingStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("ChargingStationId");

                    b.HasIndex("TenantId");

                    b.ToTable("charging_station");
                });

            modelBuilder.Entity("ChargingStations.Domain.TenantAggregate.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("TenantId");

                    b.ToTable("tenant");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargerAggregate.Charger", b =>
                {
                    b.HasOne("ChargingStations.Domain.ChargerModelAggregate.ChargerModel", "ChargerModel")
                        .WithMany("Chargers")
                        .HasForeignKey("ChargerModelId")
                        .HasConstraintName("FK_Charger_ChargerModel_ChargerModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChargingStations.Domain.ChargingStationAggregate.ChargingStation", "ChargingStation")
                        .WithMany("Chargers")
                        .HasForeignKey("ChargingStationId")
                        .HasConstraintName("FK_Charger_ChargingStation_ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargerModel");

                    b.Navigation("ChargingStation");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargingStationAggregate.ChargingStation", b =>
                {
                    b.HasOne("ChargingStations.Domain.TenantAggregate.Tenant", "Tenant")
                        .WithMany("ChargingStations")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_ChargingStation_Tenant_TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargerModelAggregate.ChargerModel", b =>
                {
                    b.Navigation("Chargers");
                });

            modelBuilder.Entity("ChargingStations.Domain.ChargingStationAggregate.ChargingStation", b =>
                {
                    b.Navigation("Chargers");
                });

            modelBuilder.Entity("ChargingStations.Domain.TenantAggregate.Tenant", b =>
                {
                    b.Navigation("ChargingStations");
                });
#pragma warning restore 612, 618
        }
    }
}
